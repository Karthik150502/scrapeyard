// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workflow {
  id                String              @id @default(cuid())
  userId            String
  name              String
  description       String?
  definition        String
  executionPlan     String?
  creditsCost       Int                 @default(0)
  status            String
  cron              String?
  nextRunAt         DateTime?
  lastRunAt         DateTime?
  lastRunId         String?
  lastRunStatus     String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  WorkFlowExecution WorkFlowExecution[]

  @@unique([name, userId])
}

model WorkFlowExecution {
  id          String    @id @default(cuid())
  userId      String
  workflowId  String
  trigger     String
  status      String
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  definition  String    @default("{}")

  creditsConsumed Int @default(0)

  workflow Workflow         @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  phases   ExecutionPhase[]
}

model ExecutionPhase {
  id          String    @id @default(uuid())
  userId      String
  status      String
  number      Int
  node        String
  name        String
  startedAt   DateTime?
  completedAt DateTime?
  inputs      String?
  outputs     String?

  creditsConsumed     Int?
  workflowExecutionId String
  execution           WorkFlowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  executionLogs       ExecutionLog[]
}

model ExecutionLog {
  id        String   @id @default(cuid())
  logLevel  String
  message   String
  timeStamp DateTime @default(now())

  executioPhaseId String
  executionPhase  ExecutionPhase @relation(fields: [executioPhaseId], references: [id], onDelete: Cascade)
}

model UserBalance {
  userId  String @id
  credits Int    @default(0)
}

model Credential {
  id        String   @id @default(cuid())
  userId    String
  name      String
  value     String
  createdAt DateTime @default(now())

  @@unique([userId, name])
}
